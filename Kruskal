#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class DS{
  vector<int> parent, rank;
  public:
  DS(int n){
    parent.resize(n);
    rank.resize(n,0);
    for (int i = 0; i < n; i++) parent[i] = i;
  }
  int findParent(int u){
    if(u==parent[u]) return u;
    return parent[u]=findParent(parent[u]);
  }
  void unionBySize(int u, int v){
    int parU=findParent(u);
    int parV=findParent(v);

    if(parU!=parV){
      if(rank[parU]>rank[parV]){
        parent[parV]=parU;
      }
      else if(rank[parU]<rank[parV]){
        parent[parU]=parV;
      }
      else{
        parent[parU]=parV;
        rank[parV]++;
      }
    }
  }

};

int kruskalMST(int V, vector<vector<pair<int, int>>> &adj) {
    vector<pair<int, pair<int, int>>> edges;

    for(int i=0;i<V;i++){
      for(auto it:adj[i]){
      int adjNode=it.first;
      int adjWt=it.second;
      edges.push_back({adjWt,{i,adjNode}});
      }
    }

    sort(edges.begin(),edges.end());

    DS ds(V);
    int sum=0;

    for(auto i: edges){
     int wt=i.first;
     int u=i.second.first;
     int v=i.second.second;

     if(ds.findParent(u)!=ds.findParent(v)){
      ds.unionBySize(u,v);
      sum+=wt;
     }
    }
    return sum;
}

int main() {
    int V = 5; // Number of vertices

    // Adjacency list representation
    vector<vector<pair<int, int>>> adj(V);
    adj[0].push_back({1, 2});
    adj[0].push_back({3, 6});
    adj[1].push_back({0, 2});
    adj[1].push_back({2, 3});
    adj[1].push_back({3, 8});
    adj[1].push_back({4, 5});
    adj[2].push_back({1, 3});
    adj[2].push_back({4, 7});
    adj[3].push_back({0, 6});
    adj[3].push_back({1, 8});
    adj[4].push_back({1, 5});
    adj[4].push_back({2, 7});

    // Calculate MST weight
    int mstWeight = kruskalMST(V, adj);
    cout << "Total weight of the MST is: " << mstWeight << endl;

    return 0;
}
